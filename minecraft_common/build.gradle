plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
}

version = project.minecraft_common_version
group = project.maven_group

base {
    archivesName = project.minecraft_common_archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "sams_bits" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

fabricApi {
    configureDataGeneration()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Libraries
    modImplementation include("eu.pb4:polymer-core:${polymer_core_version}")
    modRuntimeOnly include("eu.pb4:polymer-bundled:${polymer_core_version}")
    modImplementation include("eu.pb4:sgui:${sgui_version}")
    include(modImplementation("me.lucko:fabric-permissions-api:${fabric_permissions_api_version}"))

    // Runtime libs (TODO: not sure which ones are actually required)
    include(implementation("org.jgrapht:jgrapht-core:${jgrapht_version}"))
    include(implementation("org.jgrapht:jgrapht-io:${jgrapht_version}"))

    include(implementation("de.topobyte:osm4j-core:${osm4j_version}"))
    include(implementation("de.topobyte:osm4j-xml:${osm4j_version}"))
    include(implementation("de.topobyte:osm4j-pbf:${osm4j_version}"))
    include(implementation("de.topobyte:osm4j-geometry:${osm4j_version}"))
    include(implementation("de.topobyte:osm4j-pbf-full-runtime:${osm4j_version}"))

    include(implementation("com.fasterxml.jackson.core:jackson-databind:${jackson_version}"))
    include(implementation("com.fasterxml.jackson.core:jackson-core:${jackson_version}"))
    include(implementation("com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"))

    include(implementation("com.slimjars.trove4j:trove4j-advancing-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-constants:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-double-array-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-double-collection:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-double-function:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-double-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-double-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-double-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-float-array-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-float-collection:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-float-function:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-float-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-float-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-float-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-hash:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-hash-functions:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-hash-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-hash-primitive-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-array-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-array-stack:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-collection:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-function:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-hash:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-object-hash-map:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-object-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-object-map:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-object-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-set:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-int-stack:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-array-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-array-stack:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-collection:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-function:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-hash:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-hash-set:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-list:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-object-hash-map:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-object-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-object-map:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-object-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-set:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-long-stack:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-function:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-hash:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-hash-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-int-hash-map:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-int-iterator:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-int-map:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-int-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-object-procedure:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-prime-finder:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-primitive-hash:${trove4j_version}"))
    include(implementation("com.slimjars.trove4j:trove4j-primitive-iterator:${trove4j_version}"))

    include(implementation("joda-time:joda-time:${joda_time_version}"))

    include(implementation("org.apache.commons:commons-lang3:3.12.0"))
    include(implementation("org.apache.commons:commons-text:1.10.0"))



    include(implementation(project(":common")))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "polymer_core_version": polymer_core_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.minecraft_common_archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}